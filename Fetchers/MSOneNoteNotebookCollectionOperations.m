/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOneNoteNotebook.h"
#import "MSOneNoteFetchers.h"


/** Implementation for MSOneNoteNotebookCollectionOperations
 *
 */
@implementation MSOneNoteNotebookCollectionOperations

- (void)copyNotebookWithSiteCollectionId:(NSString *)siteCollectionId siteId:(NSString *)siteId groupId:(NSString *)groupId renameAs:(NSString *)renameAs notebookFolder:(NSString *)notebookFolder callback:(void (^)(MSOneNoteCopyStatusModel *, MSOrcError*))callback {


      NSString *siteCollectionIdString = [NSString stringWithFormat:@"\"%@\"", siteCollectionId];

  NSString *siteIdString = [NSString stringWithFormat:@"\"%@\"", siteId];

  NSString *groupIdString = [NSString stringWithFormat:@"\"%@\"", groupId];

  NSString *renameAsString = [NSString stringWithFormat:@"\"%@\"", renameAs];

  NSString *notebookFolderString = [NSString stringWithFormat:@"\"%@\"", notebookFolder];

    return [self copyNotebookRawWithSiteCollectionId:siteCollectionIdString siteId:siteIdString groupId:groupIdString renameAs:renameAsString notebookFolder:notebookFolderString callback:^(NSString *returnValue, MSOrcError *e) {
       
       if (e == nil) {
            MSOneNoteCopyStatusModel * result = (MSOneNoteCopyStatusModel *)[MSOrcObjectizer objectizeFromString:returnValue toType: [MSOneNoteCopyStatusModel  class]];
            callback(result, e);
        } 
        else {

            callback(nil, e);
        }
    }];    
    
        
}

- (void)copyNotebookRawWithSiteCollectionId:(NSString *)siteCollectionId siteId:(NSString *)siteId groupId:(NSString *)groupId renameAs:(NSString *)renameAs notebookFolder:(NSString *)notebookFolder callback:(void (^)(NSString *, MSOrcError*))callback {
        
    id<MSOrcRequest> request = [super.resolver createOrcRequest];
    
    NSArray *parameters = [[NSArray alloc] initWithObjects: [[NSDictionary alloc] initWithObjectsAndKeys:  siteCollectionId, @"siteCollectionId", siteId, @"siteId", groupId, @"groupId", renameAs, @"renameAs", notebookFolder, @"notebookFolder", nil ] , nil];
    NSData* payload = [[MSOrcBaseContainer generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];
    [request setContent:payload];
    
    [request setVerb:HTTP_VERB_POST];
	     
	[request.url appendPathComponent:@"CopyNotebook"];
        	
    return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
        
		if (e == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], e);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], e);
        }
    }];
    
    }
- (void)exportNotebookWithCallback:(void (^)(int, MSOrcError*))callback {


        return [self exportNotebookRawWithCallback:^(NSString *returnValue, MSOrcError *e) {
       
       if (e == nil) {
            int result = (int)[MSOrcObjectizer intFromString:returnValue];
            callback(result, e);
        } 
        else {

            callback((int)[returnValue integerValue], e);
        }
    }];    
    
        
}

- (void)exportNotebookRawWithCallback:(void (^)(NSString *, MSOrcError*))callback {
        
    id<MSOrcRequest> request = [super.resolver createOrcRequest];
    
        
    [request setVerb:HTTP_VERB_POST];
	     
	[request.url appendPathComponent:@"ExportNotebook"];
        	
    return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
        
		if (e == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], e);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], e);
        }
    }];
    
    }

@end
